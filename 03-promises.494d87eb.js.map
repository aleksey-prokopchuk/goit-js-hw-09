{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAE9BC,EAAaF,SAASC,cAAc,kBACpCE,EAAYH,SAASC,cAAc,iBACnCG,EAASJ,SAASC,cAAc,mBAEtCF,EAAKM,iBAAiB,UAEtB,SAAkBC,G,kBAOd,IAAMC,EAAQC,EAAiBC,EAAgBC,EACzCC,EAAWD,EAAI,EACrBE,YAAW,WAwBf,IAAuBC,EAAUC,GAAVD,EAvBHF,EAuBaG,EAvBHP,EAwBrB,IAAIQ,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAGpCH,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,cA9BhBM,MAAK,SAAAC,G,IAAGR,EAAQQ,EAARR,SAAUC,EAAKO,EAALP,MACjBQ,EAAAzB,GAAS0B,OAAOC,QACd,uBAAwCC,OAAfZ,EAAS,QAAYY,OAANX,EAAM,MAC5C,CACAY,QAAS,SAIdC,OAAM,SAAAN,G,IAAGR,EAAQQ,EAARR,SAAUC,EAAKO,EAALP,MAClBQ,EAAAzB,GAAS0B,OAAOK,QACd,sBAAqCH,OAAfZ,EAAS,QAAYY,OAANX,EAAM,MAC3C,CACEY,QAAS,WAIhBnB,IA1BLD,EAAMuB,eAAe,GAKrB,IAJA,IAAMrB,EAAiBsB,OAAO5B,EAAW6B,OACnCtB,EAAgBqB,OAAO3B,EAAU4B,OACjCC,EAAYF,OAAO1B,EAAO2B,OAEvBE,EAAI,EAAGA,EAAID,EAAWC,GAAK,EAACC,EAAAD,MAyBvCE,QAAQC,IAAIrC,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nconst firstDelay = document.querySelector('[name=\"delay\"]');\nconst delayStep = document.querySelector('[name=\"step\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault(5);\n  const firstDelayData = Number(firstDelay.value);\n  const delayStepData = Number(delayStep.value);\n  const amountDta = Number(amount.value);\n\n  for (let i = 0; i < amountDta; i += 1) {\n    const delay = firstDelayData + delayStepData * i;\n    const position = i + 1;\n    setTimeout(() => {\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`,\n            {\n              timeout: 2000,\n            }\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`,\n            {\n              timeout: 2000,\n            }\n          );\n        });\n    }, delay);\n  }\n}\n\nconsole.log(form);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      // Fulfill\n      resolve({ position, delay });\n    } else {\n      // Reject\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$firstDelay","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amount","addEventListener","event","delay1","firstDelayData","delayStepData","i","position1","setTimeout","position","delay","Promise","resolve","reject","Math","random","then","param","$parcel$interopDefault","Notify","success","concat","timeout","catch","failure","preventDefault","Number","value","amountDta","i1","_loop","console","log"],"version":3,"file":"03-promises.494d87eb.js.map"}